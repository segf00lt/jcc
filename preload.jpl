Allocator :: proc (s32, s64, s64, *void, *void, s64) *void;
//Logger :: *void;

Allocator_mode :: s32;

ALLOC_MODE_ALLOCATE : Allocator_mode : 0;
ALLOC_MODE_RESIZE   : Allocator_mode : 1;
ALLOC_MODE_FREE     : Allocator_mode : 2;
ALLOC_MODE_FREE_ALL : Allocator_mode : 3;

Type_info_tag :: u32;

//TODO add enums so we can do this in a less stupid way
//TODO constant struct members also
TYPE_INFO_TAG_VOID     : Type_info_tag :   0;
TYPE_INFO_TAG_INT      : Type_info_tag :   1;
TYPE_INFO_TAG_FLOAT    : Type_info_tag :   2;
TYPE_INFO_TAG_BOOL     : Type_info_tag :   2;
TYPE_INFO_TAG_TYPE     : Type_info_tag :   4;
TYPE_INFO_TAG_POINTER  : Type_info_tag :   5;
TYPE_INFO_TAG_ARRAY    : Type_info_tag :   6;
TYPE_INFO_TAG_STRING   : Type_info_tag :   7;
TYPE_INFO_TAG_STRUCT   : Type_info_tag :   8;
TYPE_INFO_TAG_ENUM     : Type_info_tag :   9;
TYPE_INFO_TAG_PROC     : Type_info_tag :  10;
TYPE_INFO_TAG_ANY      : Type_info_tag :  11;

struct Type_info {
    tag: Type_info_tag;
    align: u32;
    bytes: u64;
}

struct Type_info_int {
    using Type_info;

    bits: u32;
    sign: bool;
}

struct Type_info_float {
    using Type_info;

    bits: u32;
}

struct Type_info_pointer {
    using Type_info;

    pointer_to: *Type_info;
}

struct Type_info_array {
    using Type_info;

    array_of:    *Type_info;
    array_count:  u64;
    array_kind:   u32; // 0 STATIC, 1 DYNAMIC, 2 VIEW
}

struct Type_info_struct_member {
    name:    string;
    type:   *Type_info;
    offset:  u64;
}

struct Type_info_struct {
    using Type_info;

    name:      string;
    members: []Type_info_struct_member;
}

struct Type_info_proc {
    using Type_info;

    param_types:  []*Type_info;
    return_types: []*Type_info;
}

struct _String_view { // struct definition for a builtin string
    data: *char;
    len:   u64;
}

struct _Array_view {
    data: *u8;
    count: u64;
}

struct _Dynamic_array {
    data:           *u8;
    count:           u64;
    cap:             u64;
    allocator:       Allocator;
    allocator_data: *void;
}

struct Any {
    data: *void;
    type: *Type_info;
}

struct Context {
    thread_index: u32;

    allocator: Allocator = __default_allocator;
    allocator_data: *void;

    //logger: Logger; //TODO Logger
    //logger_data: *void;

    temporary_storage: *Temporary_storage;
}

struct Temporary_storage {
    data:           *u8;
    offset:        u32;
    size:            u32;
    high_water_mark: u32;
}

size_t :: u64;
STDIN  :: 0;
STDOUT :: 1;
STDERR :: 2;

proc malloc(bytes: size_t) *void #system;
proc realloc(ptr: *void, bytes: size_t) *void #system;
proc free(ptr: *void) #system; //TODO pass a string to #system directive so we can give an internal name to system functions if we want
proc write(fd: s32, buf: *void, bytes: size_t) size_t #system;
proc read(fd: s32, buf: *void, bytes: size_t) size_t #system;
proc memcpy(dest: *void, src: *void, n: size_t) *void #system;
proc memmove(dest: *void, src: *void, n: size_t) *void #system;

proc __align_up(offset: u64, align: u64 = 8) u64 {
    if align == cast(u64)0 return offset;
    
    return (offset + align - cast(u64)1) & ~(align - cast(u64)1);
}

proc __default_allocator(mode: s32, size: s64, oldsize: s64, old_memory_ptr: *void, allocator_data: *void, options: s64) *void {
    if mode == ALLOC_MODE_ALLOCATE {
        result: *u8 = cast(*u8)malloc(size);

        i := 0;
        while i < size {
            result[i] = 0;
            i++;
        }

        return result;
    } else if mode == ALLOC_MODE_RESIZE {
        return realloc(old_memory_ptr, size);
    } else if mode == ALLOC_MODE_FREE {
        free(old_memory_ptr);
    } else if mode == ALLOC_MODE_FREE_ALL {
        _ := 0; // do nothing
    }

    return cast(*void)0;
}

proc __temporary_allocator(mode: s32, size: s64, oldsize: s64, old_memory_ptr: *void, allocator_data: *void, options: s64) *void {
    temp := context.temporary_storage;

    if mode == ALLOC_MODE_ALLOCATE || mode == ALLOC_MODE_RESIZE {
        offset: u32 = __align_up(cast(u64)cast(*void)temp.data + temp.offset) - cast(u64)cast(*void)temp.data;
        ptr := temp.data + offset;
        temp.offset = offset + cast(u32)size;

        if temp.offset > temp.high_water_mark
            temp.high_water_mark = temp.offset;

        i := 0;

        if mode == ALLOC_MODE_RESIZE {
            memmove(ptr, old_memory_ptr, oldsize);
            i = oldsize;
        }

        while i < size {
            ptr[i] = 0;
            i++;
        }

        return ptr;
    } else if mode == ALLOC_MODE_FREE {
        _ := 0; // do nothing
    } else if mode == ALLOC_MODE_FREE_ALL {
        temp.offset = 0;
    }

    return cast(*void)0;
}

