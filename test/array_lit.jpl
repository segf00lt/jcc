//TODO refactor type inference for array literals
proc main() int {
    ivar := 35;
    
    array1: [4]int = [1, 2, 3, 4];
    array2: [4]int = int:[1, 2, 3, 4];
    array3 := int:[1, 2, 3, 4];
    array4 := [ivar, 2, 3, 4];
    
    array5 := [
        float:[1, 2],
        float:[3, 4],
    ];
    
    array6 : [2][2]float = [
        int:[1, 2],
        [3, 4],
    ];
    
    array7 := [2]int:[
        [1, 2],
        [3, 4],
    ];
    
    array8: [2][2]int = [2]int:[
        [1, 2],
        [3, 4],
    ];

    array9 := [
        f32:[1.0, 2.0],
        [3.0, 4.7],
    ];

    array10: [3][2]float = [
        f32:[1.0, 2.0],
        [3.0, 4.7],
    ];

    ivar = #run other_proc([7, 14, 21, 28]);

    array8[1] = [6, 8];

    array1 = #run make_array(5150);

    mat := make_matrix(3);
    
    mat2: [3][2]int = ---;

    mat2 = mat;
//    mat2[2][0] = 0;

//    return array1[2] + mat[2][0] * mat2[2][0];
    return array1[2] + mat[2][0];
}

proc other_proc(arr: [4]int) int {
    arr = [7, 8, 9, 10];
    return arr[3] + arr[0];
}

proc make_matrix(x: int) [3][2]int {
    return [
            [x, x * 2],
            [x * 3, x * 4],
            [x * 5, x * 6],
    ];
}

proc make_array(i: int) [4]int {
    array := [1, 2, i, 4];
    return array;
}

#run main();
