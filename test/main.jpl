/*
proc test_proc(i: int, s: []char) bool {
    x: u64 = 25;
    if s[i] {
        x += 15;
        return cast(bool)0;
    } else if s[i+1] {
        x += 15;
        x = 4;
        return cast(bool)1;
    } else {
        dummy := 1293;
    }

    while 0 {
        one :: 1;
        x -= one;
    }

    test_array := u64.[1 + 4, 2, 3];

    it := 0;
    for test_array {
        x *= test_array[it];
        it++;
    }

    y := x * 50;

    return cast(bool)2;
}

i: int = 12;
x : y;
TWO_PI := PI * 2;
PI :: TWO_PI / 2;
A :: B;
B :: C;
C :: A;
s := "hello sailor";
proc test_proc2(i: int, c: [3]*[..]char, f: float = 3.14) int, char;

*/


proc test_proc(i: int, x: int, c: char, f: float) {
    y := 15 - x << TWO;

    defer y += x / 7;

    {
        jane := 24;
        jane <<= 4;
    }

    bob := 42;

    y -= 1;
    y = 2 / y;

    i = (x + 12 * 8 + 2*x) / y;

    ptr: *s32 = cast(*void)123456;
    >ptr = 4;
    ptr[5*i] = ptr[4*x] + 65 + cast(s32)f;
    f = cast(float)y;

    a := 0;
    b := 0;

    foo: int = 3;
    addr_of_foo: *int = @foo;
    addr_addr_of_foo: **int = @addr_of_foo;
    other_addr_of_foo: *int = @>addr_of_foo;
    other_other_addr_of_foo: *int = @addr_of_foo[a + b];
}

TWO :: 2;
