
#run rule110(#run fib(#run fib(8)));

proc rule110(N: int) {
    buf2: [D]bool = ---;

    buf1: [(buf2.count / 2) + (D >> 1)]bool = ---;
    buf1[0] = 1;
    buf1[1] = 1;
    buf1[2] = 0;
    buf1[3] = 1;
    buf1[4] = 0;
    buf1[5] = 0;
    buf1[6] = 0;
    buf1[7] = 0;
    buf1[8] = 1;
    buf1[9] = 0;
    buf1[10] = 0;
    buf1[11] = 1;
    buf1[12] = 0;
    buf1[13] = 0;
    buf1[14] = 0;
    buf1[15] = 1;
    buf1[16] = 0;
    buf1[17] = 0;
    buf1[18] = 0;
    buf1[19] = 0;
    buf1[20] = 0;
    buf1[21] = 1;
    buf1[22] = 0;
    buf1[23] = 0;
    buf1[24] = 0;
    buf1[25] = 0;
    buf1[26] = 0;
    buf1[27] = 0;
    buf1[28] = 1;
    buf1[29] = 1;

    tape := buf1.data;
    next_tape := buf2.data;

    rules: [8]int = ---;
    rules[0] = 0;
    rules[1] = 1;
    rules[2] = 1;
    rules[3] = 1;
    rules[4] = 0;
    rules[5] = 1;
    rules[6] = 1;
    rules[7] = 0;

    N += fib(8);

    while generation_loop: N > 0 || 0 {
        defer N--;

        i := 0;

        while tape_loop: i < D {

            if N == 7 {
                N--;
                continue generation_loop;
            }

            left := i - 1;
            if i == 0 left = D - 1;
            right := i + 1;
            if i == D-1 right = 0;
            pat := (tape[left] << 2) | (tape[i] << 1) | tape[right];
            next_tape[i] = rules[pat];
            i++;

            if i == D && N == 5 {
                break generation_loop;
            }
        }

        tmp := tape;
        tape = next_tape;
        next_tape = tmp;
    }
}

proc test2(x: int) {
    //x = fib(x);
    return;
}

proc fib(n: int) int {
    if n <= 1 return n;
    return fib(n - 1) + fib(n - 2);
}

proc fib2(n: int) int {
    if n <= 1 return n;
    return fib(n - 1) + 1;
}

proc test(x: int) int {
    //x = fib(x);
    return x + 1;
}

D :: 30;

