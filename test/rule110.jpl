#run rule110(#run fib(#run fib(8)));

proc rule110(N: int) void {
    buf2: [D]bool = ---;

    buf1: [(buf2.count / 2) + (D >> 1)]bool = [
          1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1,
    ];

    //tape := buf1.data;
    //tape := cast(*bool)buf1;
    test: []bool = buf1;
    tape := cast(*bool)test;
    print("buf1.data = %\n", cast(u64)cast(*void)buf1.data);
    print("test.data = %\n", cast(u64)cast(*void)test.data);
    print("tape = %\n", cast(u64)cast(*void)tape);
    next_tape := buf2.data;

    rules: [8]int = ---;
    rules[0] = 0;
    rules[1] = 1;
    rules[2] = 1;
    rules[3] = 1;
    rules[4] = 0;
    rules[5] = 1;
    rules[6] = 1;
    rules[7] = 0;

    N += fib(8);

    print_char(10);
    print_int(N);
    print_char(10);

    while generation_loop: N > 0 || 0 {
        defer N--;

        i := 0;

        ones_in_a_row := 0;
        while tape_loop: i < D {
            defer i++;

            if tape[i] == 1 ones_in_a_row++;

            if ones_in_a_row == 4 {
                continue tape_loop;
            } else if ones_in_a_row == 3 {
                break generation_loop;
            }

            left := i - 1;
            if i == 0 left = D - 1;
            right := i + 1;
            if i == D-1 right = 0;
            pat := (tape[left] << 2) | (tape[i] << 1) | tape[right];
            next_tape[i] = rules[pat];
        }

        tmp := tape;
        tape = next_tape;
        next_tape = tmp;
    }

    //print("tape %\nnext_tape %\n", tape, next_tape);
    print("tape ");
    i := 0;
    
    while i < D - 1 {
        defer i++;
        if tape[i] print_char(49);
        else       print_char(48);
        print_char(32);
    }

    if tape[i] print_char(49);
    else       print_char(48);
    print_char(10);
    print_char(10);
    putchar(52);
    putchar();
}

proc print_int(n: int) {
    buf: [64]char = ---;
    reversed_buf: [buf.count]char = ---;

    i := 0;

    c := n % 10 + 48;
    n /= 10;
    buf[i] = c;
    i++;

    while n > 0 {
        c = n % 10 + 48;
        n /= 10;
        buf[i] = c;
        i++;
    }

    j := 0;

    while i > 0 {
        i--;
        reversed_buf[j] = buf[i];
        j++;
    }

    write(STDOUT, cast(*void)reversed_buf.data, j);
}

proc print_char(c: char) {
    buf := [c];
    write(STDOUT, cast(*void)buf.data, buf.count);
}

proc putchar(c: s32 = 10) s32 #system;

proc test2(x: int) {
    x = fib(x);
    return;
}

proc fib(n: int) int {
    if n <= 1 return n;
    return fib(n - 1) + fib(n - 2);
}

proc fib2(n: int) int {
    if n <= 1 return n;
    return fib(n - 1) + 1;
}

proc test(x: int) int {
    x = fib(x);
    return x + 1;
}

D :: 30;

