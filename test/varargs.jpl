/*
proc string_concat(a: string, b: string) string {
    s_view: _String_view = ---;
    s_view.len = a.len + b.len;
    s_view.data = cast(*char)malloc(s_view.len);

    w := s_view.data;

    i := 0;
    while i < a.len {
        w[i] = a[i];
        i++;
    }

    w += a.len;
    i = 0;
    while i < b.len {
        w[i] = b[i];
        i++;
    }

    s: string = s_view;

    return s;
}
*/

proc debug_here() {
    s := "here!!!!!!!!\n";
    write(STDOUT, cast(*void)s.data, s.len);
}

proc print(fmt: string, args: ..) {

    if args.count == 0 {
        write(STDOUT, cast(*void)fmt.data, fmt.len);
        return;
    }

    argi: u64 = 0;

    begin_fmt_slice := fmt.data;
    end_fmt_slice := fmt.data;

    //output: string;

    int_format_buf: [65]char = ---;

    while argi < args.count {
        defer argi++;

        while >end_fmt_slice != 37 && fmt.len > (end_fmt_slice - fmt.data) {
            end_fmt_slice++;
        }
        write(STDOUT, cast(*void)begin_fmt_slice, cast(size_t)(end_fmt_slice - begin_fmt_slice));
        end_fmt_slice++;
        begin_fmt_slice = end_fmt_slice;


        t: *Type_info = args[argi].type;
        v := args[argi].data;

        if t.tag == TYPE_INFO_TAG_INT {
            t_int := cast(*Type_info_int) t;
            n: u64 = ---;
            negative: bool;

            if t_int.bits == 64 &&  t_int.sign {
                x := >cast(*s64)v;
                n = x;

                if x < 0 {
                    n = -x;
                    negative = 1;
                }
            } else if t_int.bits == 64 && !t_int.sign {
                n = >cast(*u64)v;
            } else if t_int.bits == 32 &&  t_int.sign {
                x := >cast(*s32)v;
                n = x;

                if x < 0 {
                    n = -x;
                    negative = 1;
                }
            } else if t_int.bits == 32 && !t_int.sign {
                n = >cast(*u32)v;
            } else if t_int.bits == 16 &&  t_int.sign {
                x := >cast(*s16)v;
                n = x;

                if x < 0 {
                    n = -x;
                    negative = 1;
                }
            } else if t_int.bits == 16 && !t_int.sign {
                n = >cast(*u16)v;
            } else if t_int.bits == 8  &&  t_int.sign {
                x := >cast(*s8)v;
                n = x;

                if x < 0 {
                    n = -x;
                    negative = 1;
                }
            } else if t_int.bits == 8  && !t_int.sign {
                n = >cast(*u8)v;
            }

            if n == 0 {
                int_format_buf[0] = 48;
                write(STDOUT, cast(*void)int_format_buf.data, 1);
            } else {
                i := 0;

                while n > 0 {
                    int_format_buf[i] = (n % 10) + 48;
                    n /= 10;
                    i++;
                }

                if negative {
                    int_format_buf[i] = 45;
                    i++;
                }
                
                j := 0;
                k := i - 1;
                while j < k {
                    tmp := int_format_buf[j];
                    int_format_buf[j] = int_format_buf[k];
                    int_format_buf[k] = tmp;

                    j++;
                    k--;
                }

                write(STDOUT, cast(*void)int_format_buf.data, i);
            }

        } else if t.tag == TYPE_INFO_TAG_FLOAT {
            t_float := cast(*Type_info_float) t;
        } else if t.tag == TYPE_INFO_TAG_STRING {
            s := >cast(*string)v;

        } else if t.tag == TYPE_INFO_TAG_ARRAY {
            x := 0; // TODO allow empty statements
        } else if t.tag == TYPE_INFO_TAG_STRUCT {
            x := 0;
        } else {
            x := 0;
        }
    }

    write(STDOUT, cast(*void)begin_fmt_slice, fmt.len - cast(size_t)(begin_fmt_slice - fmt.data));

}

STDOUT :: 1;
size_t :: u64;

proc sleep(seconds: u32) u32 #system;
proc write(fd: s32, buf: *void, bytes: size_t) size_t #system;
proc malloc(bytes: size_t) *void #system;
proc realloc(ptr: *void, bytes: size_t) *void #system;
proc free(ptr: *void) void #system;

proc main() {
    print("abc %\n", 12);
    print("hello world, % % %\n", 12, 12, 12);
    print("hello sailor, % %\n", 12, 2);
    //s1 := "hello world\n";
    //s2 := "world, hello\n";
    //s3 := string_concat(s1, s2);
    //print(s3);
    //free(cast(*void)s3.data);
}

//#run print("abc %\n", 12);
#run main();
